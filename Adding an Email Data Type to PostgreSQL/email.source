---------------------------------------------------------------------------
--
-- email.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--
-- Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/email.source
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--	We are going to create a new type called 'email' which represents
--	email numbers.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/email$DLSUFFIX
-- (we do not want to assume this is in the daynamic loader search path).
-- Look at $PWD/email.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- the input function 'complex_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'email'
-- does not exist yet but that's okay.

CREATE FUNCTION email_in(cstring)
   RETURNS EmailAddr
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'email_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION email_out(EmailAddr)
   RETURNS cstring
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'complex_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

CREATE FUNCTION email_recv(internal)
   RETURNS EmailAddr
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'complex_send' takes the internal representation
-- and converts it into a (hopefully) platform-independent bytea string.

CREATE FUNCTION email_send(EmailAddr)
   RETURNS bytea
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;


-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 8-byte doubles).

CREATE TYPE EmailAddr (
   internallength = VARIABLE,
   input          = email_in,
   output         = email_out,
   receive        = email_recv,
   send           = email_send,
   alignment = int4
);

-----------------------------
-- Interfacing New Types with Indexes:
--  We cannot define a secondary index (eg. a B-tree) over the new type
--  yet. We need to create all the required operators and support
--      functions, then we can make the operator class.
-----------------------------

-----------------------------
-- Using the new type:
-- user-defined types can be used like ordinary built-in types.
-----------------------------

-- eg. we can use it in a table

CREATE TABLE test_email ( 
   x  EmailAddr,
   y  EmailAddr
);

-- data for user-defined types are just strings in the proper textual
-- representation.

-- first, define the required operators

CREATE FUNCTION email_lt(EmailAddr, EmailAddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;   
CREATE FUNCTION email_le(EmailAddr, EmailAddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;   
CREATE FUNCTION email_eq(EmailAddr, EmailAddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;   
CREATE FUNCTION email_neq(EmailAddr, EmailAddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;  
CREATE FUNCTION email_gt(EmailAddr, EmailAddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;  
CREATE FUNCTION email_ge(EmailAddr, EmailAddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;   
CREATE FUNCTION email_deq(EmailAddr, EmailAddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;  
CREATE FUNCTION email_ndeq(EmailAddr, EmailAddr) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR < (
   leftarg = EmailAddr, rightarg = EmailAddr, procedure = email_lt,
   commutator = > , negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR <= (
   leftarg = EmailAddr, rightarg = EmailAddr, procedure = email_le,
   commutator = >= , negator = > ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR = (
   leftarg = EmailAddr, rightarg = EmailAddr, procedure = email_eq,
   commutator = = , negator = <>,
   -- leave out negator since we didn't create <> operator
   -- negator = <> ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR >= (
   leftarg = EmailAddr, rightarg = EmailAddr, procedure = email_ge,
   commutator = <= , negator = < ,
   restrict = scalargtsel, join = scalargtjoinsel
);
CREATE OPERATOR > (
   leftarg = EmailAddr, rightarg = EmailAddr, procedure = email_gt,
   commutator = < , negator = <= ,
   restrict = scalargtsel, join = scalargtjoinsel
);

CREATE OPERATOR <> (
   leftarg = EmailAddr, rightarg = EmailAddr, procedure = email_neq,
   commutator = <> , negator = = ,
   restrict = neqsel, join = neqjoinsel
);

CREATE OPERATOR ~ (
   leftarg = EmailAddr, rightarg = EmailAddr, procedure = email_deq,
   commutator = ~ , negator = !~,
   restrict = eqsel, join = eqjoinsel
);

CREATE OPERATOR !~ (
   leftarg = EmailAddr, rightarg = EmailAddr, procedure = email_ndeq,
   commutator = !~ , negator = ~,
   restrict = neqsel, join = neqjoinsel
);

-- create the support function too

CREATE FUNCTION email_cmp(EmailAddr, EmailAddr) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION email_hash(EmailAddr) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

-- make the operator class

CREATE OPERATOR CLASS email_ops
    DEFAULT FOR TYPE EmailAddr USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       email_cmp(EmailAddr, EmailAddr);

-- hash index only has '=' op
CREATE OPERATOR CLASS email_hash_ops
    DEFAULT FOR TYPE EmailAddr USING hash AS
        OPERATOR        1       = ,
        FUNCTION        1       email_hash(EmailAddr);


-- clean up the example
--DROP TABLE UserSessions;
--DROP TYPE EmailAddr CASCADE;

